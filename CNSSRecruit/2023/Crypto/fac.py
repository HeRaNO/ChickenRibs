from gmpy2 import gcd
from Crypto.Util.number import long_to_bytes
import random

def factorSmooth(N):
	a, n = 2, 2
	while True:
		a = pow(a, n, N)
		res = gcd(a - 1, N)
		if res != 1 and res != N:
			q = N // res
			return (res, q)
		n += 1
	return 0, 0

n1 = 29993156790273796411588637755401407649619741972315831791586727944419911570896819043688187483218756247767784823799572993962152654560761989054087817767687901
e = 65537
c1 = 28308885699728621592812918494757273712938007912315485487807230648420711341284570451708049371754826651903406663574768899937862287581243099737368091309807825

p, q = factorSmooth(n1)
d = pow(e, -1, (p - 1) * (q - 1))
flag1 = long_to_bytes(pow(c1, d, n1)).decode()
print(flag1)

def getpq(n, d_e):
	p = 1
	q = 1
	while p == 1 and q == 1:
		k = d_e - 1
		g = random.randint(0, n)
		while p == 1 and q == 1 and k % 2 == 0:
			k //= 2
			y = pow(g, k, n)
			if y != 1 and gcd(y - 1, n) > 1:
				p = gcd(y - 1, n)
				q = n // p
				return p, q
	return 0, 0

c2 = 3677242432073556679040222440039877927024312077564452145956625214187804614184186227277646425370459616386984491952553180136037741092781602470053045143802537
h1 = 397340046977096077577115578026599912881304442662450049334426974861677656259439266980515145452369301652618056238525786266286451780972189318240092026572582216328286841448920434798083168400087303822060653407466964485682775061825982767
h2 = 42319976894927564843833810567252442522907372281560684051129782019144211533194692653447095916384084531450449319697685128778953472384491084162072476640254892049041007337641419872550411941455264025858397584349456909103991157799852081

pq, r = getpq(h1, h2)
p, q = getpq(pq, h2)
assert p * q * r == h1

d = pow(e, -1, (p - 1) * (q - 1))
flag2 = long_to_bytes(pow(c2, d, p * q)).decode()
print(flag2)
