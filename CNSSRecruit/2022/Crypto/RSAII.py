from sage.all import *
from Crypto.Util.number import long_to_bytes

c = 35800403528492925065338568115680718135300853570354901135598882450135427082250237437782758994480849062563228033810063097076371158325048739489009757147686522132050981647713622106267898876032313068269064810468402160575417212354984935684517325555249208553432279073970872603880643724853127224180209125738343437502
n = 51738169752782230698021988054677454117529717431973751088632823509964041980518215963761910552554571568761813914938731215639280067243084159318037793339824007809720503854742211145110990368767674402932795867096704040116691348351695213699152497817774103783310818430001932854624326538996766984154421220209373977557
mask1 = 9754815771124791821217545543088847692787546005563961503398311307572487139046737035073423689458400905956196724544178510244079477248644427947917249907763009
mask2 = 8245563884719512312199465255613659227417415900375281782961443408938954807861234751433772804690776346118610116609100139012624507920613369267495421331661801
h1 = 7227757197877138574607105748065842086981066471352070317976141793655576601269205958202628378924349378722450261549360956805903915246337641638189197508511297
h2 = 6923022948823231735321903805441780229554060067742061961600317813724662550356739659661309614344217772765532173056281707719590708420599772232382293846524201
e = 65537

P = 0
Q = 0

def getNthBit(x, n):
	return x >> n & 1

def dfs(x, p, q):
	if x == 512:
		if n == p * q:
			global P, Q
			P = p
			Q = q
		return
	possible_pi = []
	possible_qi = []
	h1i = getNthBit(h1, x)
	mask1i = getNthBit(mask1, x)
	if h1i == 1:
		assert mask1i == 1
		possible_pi.append(1)
	else:
		possible_pi.append(0)
		if mask1i == 0:
			possible_pi.append(1)
	h2i = getNthBit(h2, x)
	mask2i = getNthBit(mask2, x)
	if h2i == 1:
		assert mask2i == 1
		possible_qi.append(1)
	else:
		possible_qi.append(0)
		if mask2i == 0:
			possible_qi.append(1)
	for pi in possible_pi:
		for qi in possible_qi:
			np = pi << x | p
			nq = qi << x | q
			if np * nq % (2 ** (x + 1)) == n % (2 ** (x + 1)):
				dfs(x + 1, np, nq)

dfs(0, 0, 0)

phi = (P - 1) * (Q - 1)
d = inverse_mod(e, phi)
flag = pow(c, d, n)
print(long_to_bytes(flag).decode())
