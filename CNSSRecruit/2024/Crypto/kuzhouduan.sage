from gmpy2 import gcdext
from Crypto.Util.number import long_to_bytes, bytes_to_long
from sage.all import *

n = 6515170721824235610077767341836933885840875127391251414241431058649905695517146798474612659595551169142861886184506103913942899261023340287984546344722437
e1 = 7629805664186543656889446705637291540349114025875443716836563834859596597787836018342790489334721556488151377780074075791508513529215301207684062773549978
e2 = 9039921587803845152307464731958928360172176091850551461858009351504282865228004545395872265680096691496208319524680982403075570587404216482639595725937778
c1 = 4051037378975864795768433612586859935577401638900306752031195646978965789412075981397854666117503427453968376495404896921769061877453267600673695437655064
c2 = 1553033793693524308294676475858121205684586044416915406366461468291436664838155112756117928278740586233365774778368046411859650684761456474837957111920903

g, s, t = gcdext(e1, e2)

m_2 = pow(c1, s, n) * pow(c2, t, n) % n

hi = bytes_to_long(b"cnss{") * (2 ** ((35 - 5) * 8))
lo = bytes_to_long(b"th3ory}")

P.<x> = PolynomialRing(Zmod(n))
f = (hi + x + lo)^2 - m_2
beta = 1
dd = f.degree()   # Degree of the polynomial
epsilon = beta/50
XX = ceil(n**((beta**2/dd) - epsilon))
rt = f.small_roots(XX, beta, epsilon)

print(rt)
# [355235145339553815908836983668338285584481864125265579514741316751720448]

rt = 355235145339553815908836983668338285584481864125265579514741316751720448

m = hi + rt + lo

assert m ** 2 % n == m_2

print(long_to_bytes(m).decode())
