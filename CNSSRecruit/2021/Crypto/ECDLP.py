from sage.all import *
from Crypto.Util.number import long_to_bytes

M = 93556643250795678718734474880013829509320385402690660619699653921022012489089
A = 66001598144012865876674115570268990806314506711104521036747533612798434904785
B = 25255205054024371783896605039267101837972419055969636393425590261926131199030
P = (56027910981442853390816693056740903416379421186644480759538594137486160388926, 65533262933617146434438829354623658858649726233622196512439589744498050226926)
Q = (45327498586483906413153672412174634093375862785049326580296250293031012757729, 92851637248675027432500221064266708706584869653830467154078497414427393871661)
F = FiniteField(M)
E = EllipticCurve(F,[A,B])
P = E.point(P)
Q = E.point(Q)
dlogs = []
E_ord = E.order()
primes, exponents = zip(*factor(E_ord))
primes = list(primes)[:-2]
for p in primes:
    t = E_ord // int(p)
    dlog = discrete_log(t*Q, t*P, operation="+")
    dlogs += [dlog]

l = crt(dlogs, primes)
assert Q == l * P
print(l)
flag = b'cnss{' + long_to_bytes(l) + b'}'
print(flag.decode())
